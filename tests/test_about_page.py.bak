"""Tests for AboutPage GUI component"""

import pytest
from PySide6.QtCore import QThread
from PySide6.QtWidgets import QApplication, QPushButton, QLabel

from mdxscraper.gui.pages.about_page import AboutPage, VersionCheckThread


class TestAboutPage:
    """Test cases for AboutPage"""

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create QApplication if it doesn't exist
        if not QApplication.instance():
            self.app = QApplication([])
        else:
            self.app = QApplication.instance()
        
        self.about_page = AboutPage()
        # 初始化线程列表，用于跟踪所有创建的线程[5](@ref)
        self.active_threads = []

    def teardown_method(self):
        """Clean up test fixtures after each test method."""
        # 安全关闭所有活跃线程[6,8](@ref)
        for thread in self.active_threads:
            if thread.isRunning():
                thread.quit()  # 请求线程退出事件循环
                thread.wait(1000)  # 等待最多1秒，确保线程结束
        
        # 清理线程列表
        self.active_threads.clear()
        
        # 清理about_page中的线程引用
        if hasattr(self.about_page, 'version_thread') and self.about_page.version_thread is not None:
            if self.about_page.version_thread.isRunning():
                self.about_page.version_thread.quit()
                self.about_page.version_thread.wait(1000)
            self.about_page.version_thread = None

    def test_initialization(self):
        """Test AboutPage initialization"""
        assert self.about_page is not None
        assert hasattr(self.about_page, 'update_status_label')
        assert hasattr(self.about_page, 'check_updates_btn')
        assert hasattr(self.about_page, 'version_thread')
        assert self.about_page.version_thread is None

    def test_ui_components_exist(self):
        """Test that all required UI components are present"""
        # Check update status label
        assert isinstance(self.about_page.update_status_label, QLabel)
        assert "Click 'Check for Updates' to check" in self.about_page.update_status_label.text()

        # Check update button
        assert isinstance(self.about_page.check_updates_btn, QPushButton)
        assert self.about_page.check_updates_btn.text() == "Check for Updates"
        assert self.about_page.check_updates_btn.isEnabled()

    def test_check_for_updates_button_click(self):
        """Test that check for updates button triggers the check"""
        # Initially no thread should be running
        assert self.about_page.version_thread is None

        # Click the button
        self.about_page.check_for_updates()

        # Should create a thread
        assert self.about_page.version_thread is not None
        assert isinstance(self.about_page.version_thread, VersionCheckThread)
        
        # 将线程添加到跟踪列表[5](@ref)
        if self.about_page.version_thread not in self.active_threads:
            self.active_threads.append(self.about_page.version_thread)

    def test_check_for_updates_prevents_multiple_checks(self):
        """Test that multiple clicks don't create multiple threads"""
        # First click
        self.about_page.check_for_updates()
        first_thread = self.about_page.version_thread
        
        # 跟踪第一个线程
        if first_thread not in self.active_threads:
            self.active_threads.append(first_thread)

        # Second click while first is running
        self.about_page.check_for_updates()
        second_thread = self.about_page.version_thread

        # Should be the same thread
        assert first_thread is second_thread

    def test_ui_state_during_check(self):
        """Test UI state changes during update check"""
        # Start check
        self.about_page.check_for_updates()
        
        # 跟踪线程
        if self.about_page.version_thread not in self.active_threads:
            self.active_threads.append(self.about_page.version_thread)

        # Button should be disabled and text changed
        assert not self.about_page.check_updates_btn.isEnabled()
        assert self.about_page.check_updates_btn.text() == "Checking..."

        # Status label should show checking message
        assert "Checking for updates" in self.about_page.update_status_label.text()

    def test_on_update_check_complete_latest(self):
        """Test handling of update check completion when latest version"""
        # Simulate update check completion
        self.about_page.on_update_check_complete(True, "You are using the latest version.", "5.0.0")

        # Status should be updated
        assert self.about_page.update_status_label.text() == "You are using the latest version."

    def test_on_update_check_complete_new_version(self):
        """Test handling of update check completion when new version available"""
        # Simulate update check completion
        self.about_page.on_update_check_complete(False, "New version 5.1.0 available. Please visit homepage to update.", "5.1.0")

        # Status should be updated
        assert self.about_page.update_status_label.text() == "New version 5.1.0 available. Please visit homepage to update."

    def test_on_version_thread_finished(self):
        """Test handling of version thread completion"""
        # Create a mock thread
        mock_thread = VersionCheckThread()
        self.about_page.version_thread = mock_thread
        
        # 启动线程以便测试完成逻辑（模拟启动）
        mock_thread.start = lambda: None  # 替换start方法，避免实际启动
        
        # 将线程添加到跟踪列表
        if mock_thread not in self.active_threads:
            self.active_threads.append(mock_thread)

        # Simulate thread completion
        self.about_page.on_version_thread_finished()

        # Button should be re-enabled
        assert self.about_page.check_updates_btn.isEnabled()
        assert self.about_page.check_updates_btn.text() == "Check Again"

        # Thread should be cleaned up
        assert self.about_page.version_thread is None

    def test_button_text_updates_after_check(self):
        """Test that button text updates after check completion"""
        # Start check
        self.about_page.check_for_updates()
        
        # 跟踪线程
        if self.about_page.version_thread not in self.active_threads:
            self.active_threads.append(self.about_page.version_thread)

        # Simulate completion
        self.about_page.on_update_check_complete(True, "Latest version", "5.0.0")
        self.about_page.on_version_thread_finished()

        # Button should show "Check Again"
        assert self.about_page.check_updates_btn.text() == "Check Again"
        assert self.about_page.check_updates_btn.isEnabled()


class TestVersionCheckThread:
    """Test cases for VersionCheckThread"""

    def setup_method(self):
        """Set up test fixtures before each test method."""
        # Create QApplication if it doesn't exist
        if not QApplication.instance():
            self.app = QApplication([])
        else:
            self.app = QApplication.instance()
        
        # 初始化线程跟踪列表
        self.test_threads = []

    def teardown_method(self):
        """Clean up test fixtures after each test method."""
        # 安全关闭所有测试线程[6](@ref)
        for thread in self.test_threads:
            if thread.isRunning():
                thread.quit()
                thread.wait(1000)
        self.test_threads.clear()

    def test_initialization(self):
        """Test VersionCheckThread initialization"""
        thread = VersionCheckThread()
        self.test_threads.append(thread)  # 跟踪线程
        assert thread is not None
        assert hasattr(thread, 'version_service')
        assert hasattr(thread, 'update_available')

    def test_signal_definition(self):
        """Test that the signal is properly defined"""
        thread = VersionCheckThread()
        self.test_threads.append(thread)  # 跟踪线程
        assert hasattr(thread, 'update_available')
        # Signal should be callable
        assert callable(thread.update_available.emit)

    @pytest.mark.skip(reason="Requires actual network call - use integration tests")
    def test_run_method(self):
        """Test the run method (requires network access)"""
        thread = VersionCheckThread()
        self.test_threads.append(thread)  # 跟踪线程
        
        # This would require actual network access
        # In real tests, you'd mock the version service
        thread.run()
        
        # Verify signal was emitted (would need to connect to signal)
        # This is better tested in integration tests