name: Version Consistency Check

on:
  pull_request:
    paths:
      - 'pyproject.toml'
      - 'docs/changelog.md'
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'docs/changelog.md'

jobs:
  version-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Check version consistency
        run: |
          echo "üîç Checking version consistency..."
          VERSION=$(uv version --short)
          echo "Current version: $VERSION"
          
          # Check if changelog has this version
          if [ -f "docs/changelog.md" ]; then
            if grep -q "## \[$VERSION\]" docs/changelog.md; then
              echo "‚úÖ Version $VERSION found in changelog.md"
            else
              echo "‚ö†Ô∏è Warning: Version $VERSION not found in changelog.md"
              echo "Available versions in changelog:"
              grep "^## \[" docs/changelog.md | head -5
            fi
          else
            echo "‚ùå changelog.md not found"
            exit 1
          fi
          
          # Check if git tag exists
          if git tag -l | grep -q "v$VERSION"; then
            echo "‚úÖ Git tag v$VERSION exists"
          else
            echo "‚ÑπÔ∏è Info: Git tag v$VERSION does not exist yet"
          fi
          
          # Check version format (basic validation) using grep for portability
          if echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9.-]+)?$'; then
            echo "‚úÖ Version format is valid"
          else
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          
          echo "üéâ Version consistency check completed"
      
      - name: Check for version conflicts
        run: |
          echo "üîç Checking for potential version conflicts..."
          
          # Get current version
          CURRENT_VERSION=$(uv version --short)
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version already exists as a tag
          if git tag -l | grep -q "v$CURRENT_VERSION"; then
            echo "‚ùå Error: Version $CURRENT_VERSION already exists as a git tag"
            echo "Please bump the version before pushing changes"
            exit 1
          fi
          
          # Check if this version already exists in changelog
          if grep -q "## \[$CURRENT_VERSION\]" docs/changelog.md; then
            echo "‚ÑπÔ∏è Version $CURRENT_VERSION already exists in changelog"
            echo "This might indicate a duplicate version entry"
          fi
          
          echo "‚úÖ No version conflicts detected"
      
      - name: Validate changelog format
        run: |
          echo "üîç Validating changelog format..."
          
          if [ ! -f "docs/changelog.md" ]; then
            echo "‚ùå changelog.md not found"
            exit 1
          fi
          
          # Check for proper header format
          if ! grep -q "^# Êõ¥Êñ∞Êó•Âøó" docs/changelog.md; then
            echo "‚ùå changelog.md missing proper header"
            exit 1
          fi
          
          # Check for version entries format
          VERSION_ENTRIES=$(grep -c "^## \[" docs/changelog.md || true)
          if [ "$VERSION_ENTRIES" -eq 0 ]; then
            echo "‚ùå No version entries found in changelog.md"
            exit 1
          fi
          
          echo "‚úÖ Found $VERSION_ENTRIES version entries in changelog"
          
          # Check latest version entry format (portable check via grep -E)
          LATEST_VERSION_LINE=$(grep "^## \[" docs/changelog.md | head -1)
          if echo "$LATEST_VERSION_LINE" | grep -Eq '^## \[[0-9]+\.[0-9]+\.[0-9]+.*\] - [0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
            echo "‚úÖ Latest version entry format is correct: $LATEST_VERSION_LINE"
          else
            echo "‚ö†Ô∏è Warning: Latest version entry format might be incorrect: $LATEST_VERSION_LINE"
            echo "Expected format: ## [X.Y.Z] - YYYY-MM-DD"
          fi
          
          echo "‚úÖ Changelog format validation completed"

